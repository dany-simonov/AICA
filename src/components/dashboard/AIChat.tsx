
import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Bot, Send, User, Lightbulb, FileText, TrendingUp } from "lucide-react";

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  type?: 'text' | 'suggestion' | 'analysis';
}

export const AIChat = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ AICA. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –º–æ–¥–µ–ª–µ–π, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –û —á—ë–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?',
      sender: 'ai',
      timestamp: new Date(),
      type: 'text'
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickQuestions = [
    "–û–±—ä—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
    "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏?",
    "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç SHAP –∞–Ω–∞–ª–∏–∑?",
    "–ü–æ–∫–∞–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º"
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const simulateAIResponse = (userMessage: string): string => {
    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('shap') || lowerMessage.includes('–æ–±—ä—è—Å–Ω–∏')) {
      return `SHAP (SHapley Additive exPlanations) - —ç—Ç–æ –º–µ—Ç–æ–¥ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–Ω—è—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

–î–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ Customer_Churn_v2 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å:
1. –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ (–≤–ª–∏—è–Ω–∏–µ: +0.3)
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–≤–ª–∏—è–Ω–∏–µ: +0.25)
3. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–≤–ª–∏—è–Ω–∏–µ: -0.2)`;
    }
    
    if (lowerMessage.includes('—Ç–æ—á–Ω–æ—Å—Ç—å') || lowerMessage.includes('—É–ª—É—á—à–∏—Ç—å')) {
      return `–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:

üîç **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–∏—Ç–µ –≤—ã–±—Ä–æ—Å—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏:**
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (Random Forest, XGBoost)
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é

üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ drift
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`;
    }
    
    if (lowerMessage.includes('–¥–∞–Ω–Ω—ã') || lowerMessage.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏')) {
      return `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—é —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

üìà **–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –í –Ω–∞–±–æ—Ä–µ Sales_Q4 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3% –ø—Ä–æ–ø—É—Å–∫–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
‚Ä¢ –ù–∞–π–¥–µ–Ω—ã 15 –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Customer_Data - —É–¥–∞–ª–∏—Ç–µ –∏—Ö

üéØ **–ù–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ Price_Prediction
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –ø–æ–≥–æ–¥–∞)

‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**
‚Ä¢ –ú–æ–¥–µ–ª—å Fraud_Detection –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å regularization`;
    }
    
    return `–ü–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:

ü§ñ **–ê–Ω–∞–ª–∏–∑–æ–º –º–æ–¥–µ–ª–µ–π** - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
üìä **–†–∞–±–æ—Ç–æ–π —Å –¥–∞–Ω–Ω—ã–º–∏** - –æ—á–∏—Å—Ç–∫–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è  
üìã **–ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ performance

–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç!`;
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: simulateAIResponse(inputValue),
        sender: 'ai',
        timestamp: new Date(),
        type: 'text'
      };

      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1500);
  };

  const handleQuickQuestion = (question: string) => {
    setInputValue(question);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="h-[600px] flex flex-col">
      <Card className="flex-1 flex flex-col">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center space-x-2">
            <Bot className="h-5 w-5 text-blue-600" />
            <span>AI –ü–æ–º–æ—â–Ω–∏–∫ AICA</span>
            <Badge variant="secondary" className="bg-green-100 text-green-700">
              –û–Ω–ª–∞–π–Ω
            </Badge>
          </CardTitle>
        </CardHeader>
        
        <CardContent className="flex-1 flex flex-col space-y-4">
          {/* Messages */}
          <ScrollArea className="flex-1 pr-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] rounded-lg px-4 py-2 ${
                      message.sender === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <div className="flex items-start space-x-2">
                      {message.sender === 'ai' && (
                        <Bot className="h-4 w-4 mt-1 text-blue-600" />
                      )}
                      {message.sender === 'user' && (
                        <User className="h-4 w-4 mt-1" />
                      )}
                      <div className="flex-1">
                        <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                        <div className={`text-xs mt-1 ${
                          message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                        }`}>
                          {message.timestamp.toLocaleTimeString('ru-RU', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-lg px-4 py-2 max-w-[80%]">
                    <div className="flex items-center space-x-2">
                      <Bot className="h-4 w-4 text-blue-600" />
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div ref={messagesEndRef} />
          </ScrollArea>

          {/* Quick Questions */}
          <div className="border-t pt-3">
            <div className="text-sm text-gray-600 mb-2">–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</div>
            <div className="flex flex-wrap gap-2">
              {quickQuestions.map((question, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => handleQuickQuestion(question)}
                  className="text-xs"
                >
                  {question}
                </Button>
              ))}
            </div>
          </div>

          {/* Input */}
          <div className="flex space-x-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI –ø–æ–º–æ—â–Ω–∏–∫—É..."
              className="flex-1"
              disabled={isLoading}
            />
            <Button 
              onClick={handleSendMessage} 
              disabled={!inputValue.trim() || isLoading}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
