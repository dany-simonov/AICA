
import { AIModel } from '@/lib/aiModels';

export interface AIResponse {
  success: boolean;
  content: string;
  model: string;
  tokens?: number;
  error?: string;
}

export class AIService {
  private static instance: AIService;
  private apiKeys: Map<string, string> = new Map();

  private constructor() {}

  static getInstance(): AIService {
    if (!AIService.instance) {
      AIService.instance = new AIService();
    }
    return AIService.instance;
  }

  setApiKey(provider: string, key: string) {
    this.apiKeys.set(provider, key);
  }

  async generateResponse(model: AIModel, prompt: string): Promise<AIResponse> {
    try {
      console.log(`Generating response with ${model.name}...`);
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
      const responses = await this.getModelResponse(model, prompt);
      
      return {
        success: true,
        content: responses,
        model: model.name,
        tokens: Math.floor(Math.random() * 500) + 100
      };
    } catch (error) {
      console.error(`Error with ${model.name}:`, error);
      return {
        success: false,
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.',
        model: model.name,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async getModelResponse(model: AIModel, prompt: string): Promise<string> {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    const lowerPrompt = prompt.toLowerCase();
    
    switch (model.id) {
      case 'gpt-4o':
        return this.getGPT4Response(lowerPrompt);
      case 'claude-3-sonnet':
        return this.getClaudeResponse(lowerPrompt);
      case 'llama-3.1-8b':
        return this.getLlamaResponse(lowerPrompt);
      case 'gemini-pro':
        return this.getGeminiResponse(lowerPrompt);
      case 'mistral-large':
        return this.getMistralResponse(lowerPrompt);
      default:
        return '–ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
    }
  }

  private async getGPT4Response(prompt: string): Promise<string> {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    if (prompt.includes('–º–æ–¥–µ–ª') || prompt.includes('–∞–Ω–∞–ª–∏–∑')) {
      return `**GPT-4 Omni Analysis** ü§ñ

–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–µ–µ:

üìä **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**
‚Ä¢ Accuracy: >95% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ Precision/Recall: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ F1-Score: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ

üîç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**
1. –£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 30%
2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å feature engineering –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å hyperparameter tuning —Å Bayesian optimization

‚ö†Ô∏è **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏:**
‚Ä¢ Data drift –≤ production —Å—Ä–µ–¥–µ
‚Ä¢ Bias –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Overfitting –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ

–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø—Ä–æ–≤–µ–ª –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏?`;
    }
    
    return `–ü—Ä–∏–≤–µ—Ç! –Ø GPT-4 Omni ü§ñ. –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–ª–æ–∂–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∑–∞–¥–∞—á. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º–∏ ML –º–æ–¥–µ–ª—è–º–∏?`;
  }

  private async getClaudeResponse(prompt: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    if (prompt.includes('—ç—Ç–∏–∫') || prompt.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç')) {
      return `**Claude 3 Sonnet - –≠—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** üß†

–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–≥–æ ML —Ä–µ—à–µ–Ω–∏—è:

üõ°Ô∏è **–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ AI:**
‚Ä¢ **–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å**: –ú–æ–¥–µ–ª—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã
‚Ä¢ **–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å**: –†–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è—Å–Ω–∏–º—ã
‚Ä¢ **–ü–æ–¥–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å**: –ß–µ—Ç–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å**: –ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

‚öñÔ∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ç–∏–∫–µ:**
1. –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å (bias testing)
2. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ explainable AI –º–µ—Ç–æ–¥–æ–≤
3. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –≥–∞–π–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —Ä–µ—à–µ–Ω–∏–π

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è PII –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Encryption –≤ transit –∏ at rest
‚Ä¢ Access control –∏ audit logs
‚Ä¢ GDPR/CCPA compliance

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–æ–π —ç—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤!`;
    }
    
    return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Claude 3 Sonnet üß†. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —ç—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ AI —Ä–µ—à–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?`;
  }

  private async getLlamaResponse(prompt: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (prompt.includes('–∫–æ–¥') || prompt.includes('implement')) {
      return `**Llama 3.1 - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ** ü¶ô

–í–æ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:

\`\`\`python
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import shap

class ModelAuditor:
    def __init__(self, model, X_test, y_test):
        self.model = model
        self.X_test = X_test
        self.y_test = y_test
        self.explainer = shap.TreeExplainer(model)
    
    def audit_performance(self):
        predictions = self.model.predict(self.X_test)
        return classification_report(self.y_test, predictions)
    
    def explain_predictions(self, sample_idx=0):
        shap_values = self.explainer.shap_values(self.X_test[sample_idx:sample_idx+1])
        return shap_values
    
    def detect_drift(self, X_new):
        # KS test –¥–ª—è numerical features
        from scipy.stats import ks_2samp
        drift_scores = {}
        
        for col in X_new.columns:
            if X_new[col].dtype in ['int64', 'float64']:
                statistic, p_value = ks_2samp(
                    self.X_test[col], X_new[col]
                )
                drift_scores[col] = p_value
        
        return drift_scores

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
auditor = ModelAuditor(your_model, X_test, y_test)
performance = auditor.audit_performance()
\`\`\`

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ Automated retraining pipeline
‚Ä¢ Real-time monitoring dashboard
‚Ä¢ A/B testing framework

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π?`;
    }
    
    return `–ü—Ä–∏–≤–µ—Ç! –Ø Llama 3.1 ü¶ô. –û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –∏ –∫–æ–¥–µ. –ß—Ç–æ –±—É–¥–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å?`;
  }

  private async getGeminiResponse(prompt: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 1300));
    
    if (prompt.includes('–≤–∏–∑') || prompt.includes('–≥—Ä–∞—Ñ–∏–∫')) {
      return `**Gemini Pro - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** üíé

–°–æ–∑–¥–∞–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:

üìà **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–¥—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤:**

1. **Performance Dashboard:**
   ‚Ä¢ ROC-AUV –∫—Ä–∏–≤—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   ‚Ä¢ Learning curves –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—É—á–µ–Ω–∏—è
   ‚Ä¢ Confusion matrix —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

2. **Feature Importance:**
   ‚Ä¢ SHAP waterfall plots
   ‚Ä¢ Feature correlation heatmap
   ‚Ä¢ Partial dependence plots

3. **Model Monitoring:**
   ‚Ä¢ Real-time accuracy trends
   ‚Ä¢ Data drift visualization
   ‚Ä¢ Prediction confidence distribution

üé® **–ö–æ–¥ –¥–ª—è Plotly –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:**
\`\`\`python
import plotly.graph_objects as go
import plotly.express as px

def create_model_dashboard(metrics_df):
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏
    fig.add_trace(go.Scatter(
        x=metrics_df['date'],
        y=metrics_df['accuracy'],
        mode='lines+markers',
        name='Accuracy',
        line=dict(color='#3b82f6', width=3)
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º threshold –ª–∏–Ω–∏—é
    fig.add_hline(y=0.95, line_dash="dash", 
                  line_color="red", 
                  annotation_text="Threshold")
    
    fig.update_layout(
        title="Model Performance Over Time",
        xaxis_title="Date",
        yaxis_title="Accuracy",
        hovermode='x unified'
    )
    
    return fig
\`\`\`

–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —Å–æ–∑–¥–∞–ª —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö?`;
    }
    
    return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Gemini Pro üíé. –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π. –ß–µ–º –ø–æ–º–æ—á—å?`;
  }

  private async getMistralResponse(prompt: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 1100));
    
    if (prompt.includes('gdpr') || prompt.includes('—Ä–µ–≥—É–ª–∏—Ä') || prompt.includes('compliance')) {
      return `**Mistral Large - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º** üåü

–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è AI —Ä–µ—à–µ–Ω–∏—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:

üá™üá∫ **EU AI Act Compliance:**

**–í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ AI —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç:**
‚Ä¢ –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ Human oversight
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üìã **GDPR –¥–ª—è ML –º–æ–¥–µ–ª–µ–π:**
1. **Right to explanation** - –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π
2. **Data minimization** - –º–∏–Ω–∏–º—É–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. **Purpose limitation** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
4. **Storage limitation** - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è

üîí **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ä—ã:**
‚Ä¢ Privacy by Design –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
‚Ä¢ Differential Privacy –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ Federated Learning –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
‚Ä¢ Regular compliance audits

üìñ **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∞—É–¥–∏—Ç–∞:**
- Model cards —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- Data impact assessments
- Algorithm impact assessments
- Incident response procedures

üö® **–®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:**
‚Ä¢ GDPR: –¥–æ 4% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞ –∏–ª–∏ ‚Ç¨20M
‚Ä¢ AI Act: –¥–æ 7% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞ –∏–ª–∏ ‚Ç¨35M

–ü–æ–º–æ—á—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º compliance checklist?`;
    }
    
    return `Bonjour! –Ø Mistral Large üåü. –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ö–∞–∫ –¥–µ–ª–∞ —Å compliance?`;
  }

  async testAllModels(): Promise<Map<string, AIResponse>> {
    const testPrompt = "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏.";
    const results = new Map<string, AIResponse>();
    
    const { getAvailableModels } = await import('@/lib/aiModels');
    const models = getAvailableModels();
    
    for (const model of models) {
      const response = await this.generateResponse(model, testPrompt);
      results.set(model.id, response);
    }
    
    return results;
  }
}

export const aiService = AIService.getInstance();
